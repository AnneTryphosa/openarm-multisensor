#!/usr/bin/env python3
"""Testing SitkData class to ensure ability to manipulate data representations

    Example:
        This file should be run via the CMake interface, via

            $ make test

"""
import numpy as np
import pytest

import SimpleITK as sitk
from muscledef.preprocess.sitkdata import SitkData


@pytest.fixture
def test_filename():
    """
    Returns a filename of data that can be generated by 
    generate_test_data.py "getter_setter_file()"
    """
    return "test/testdata/sitkdata_test_image.nii"


@pytest.fixture
def test_images():
    images = []
    for _ in range(2):
        matrix_data = np.random.randint(255, size=(3, 4, 5))
        image = sitk.GetImageFromArray(matrix_data.T)
        images.append(image)
    return images


@pytest.fixture
def test_matrices():
    matrices = []
    for _ in range(2):
        matrix_data = np.random.randint(255, size=(3, 4, 5))
        matrices.append(matrix_data)
    return matrices


def test_get_filename(test_filename):
    obj = SitkData.from_file(test_filename)
    assert obj.filename == test_filename
    new_object = obj.copy()
    assert new_object.filename == test_filename


def test_get_ultrasound(test_filename):
    obj = SitkData.from_file(test_filename, ultrasound=True)
    assert obj.ultrasound
    new_object = obj.copy()
    assert new_object.ultrasound

    obj = SitkData.from_file(test_filename, ultrasound=False)
    assert not obj.ultrasound
    new_object = obj.copy()
    assert not obj.ultrasound


def test_get_verbose(test_filename):
    obj = SitkData.from_file(test_filename, verbose=True)
    assert obj.verbose
    new_object = obj.copy()
    assert new_object.verbose

    obj = SitkData.from_file(test_filename, verbose=False)
    assert not obj.verbose
    new_object = obj.copy()
    assert not new_object.verbose


def test_set_verbose(test_filename):
    obj = SitkData.from_file(test_filename, verbose=True)
    assert obj.verbose
    new_object = obj.copy()
    assert new_object.verbose
    new_object.verbose = False
    assert not new_object.verbose

    obj = SitkData.from_file(test_filename, verbose=False)
    assert not obj.verbose
    new_object = obj.copy()
    assert not new_object.verbose
    new_object.verbose = True
    assert new_object.verbose


def test_get_image(test_images):
    data = SitkData.from_image(test_images[0])
    assert (sitk.GetArrayFromImage(test_images[0]).T == data.matrix_data).all()


def test_set_image(test_images):
    img1, img2 = test_images
    data = SitkData.from_image(img1)
    data.image = img2
    assert (sitk.GetArrayFromImage(img2).T == data.matrix_data).all()


def test_get_matrix_data(test_matrices):
    data = SitkData.from_matrix_data(test_matrices[0])
    assert (data.matrix_data == test_matrices[0]).all()


def test_set_matrix_data(test_matrices):
    data = SitkData.from_matrix_data(test_matrices[0])
    data.matrix_data = test_matrices[1]
    assert (data.matrix_data == test_matrices[1]).all()


def test_get_shape(test_matrices):
    data = SitkData.from_matrix_data(test_matrices[0])
    assert data.shape == (3, 4, 5)


def test_get_d(test_matrices):
    data = SitkData.from_matrix_data(test_matrices[0])
    assert data.d == len(data.shape)


def test_get_offset(test_matrices):
    data = SitkData.from_matrix_data(test_matrices[0])
    assert data.offset == (0, 0, 0)


def test_set_offset(test_matrices):
    data = SitkData.from_matrix_data(test_matrices[0])
    data.offset = (3, 2, 1)
    assert data.offset == (3, 2, 1)


def test_get_spacing():
    pass


def test_set_spacing():
    pass


def test_metadata():
    pass
